using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;

namespace SBN2SPC
{
    class Program
    {
        static byte[] header = { 0x53, 0x4E, 0x45, 0x53, 0x2D, 0x53, 0x50, 0x43, 0x37, 0x30, 0x30, 0x20, 0x53, 0x6F, 0x75, 0x6E,
            0x64, 0x20, 0x46, 0x69, 0x6C, 0x65, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x76, 0x30, 0x2E, 0x33,
            0x30, 0x1A, 0x1A, 0x1B, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        static void Main(string[] args)
        {
            Console.WriteLine("SBN2SPC v0.2");
            Console.WriteLine("---");

            if (args.Length < 2)
            {
                Usage();
                return;
            }

            //Get Mode
            byte[] aram = new byte[65536];
            ushort lastaddr = 0;

            //Set ARAM
            for (int i = 1; i < args.Length; i++)
            {
                Console.WriteLine("- Insert " + args[i] + " into ARAM");

                FileStream infile = new FileStream(args[i], FileMode.Open);
                byte[] data = new byte[infile.Length];
                infile.Read(data, 0, (int)infile.Length);
                infile.Close();

                lastaddr = InsertNRM(aram, data);
            }

            //Make SPC File
            FileStream outfile = new FileStream(args[0], FileMode.Create);

            outfile.Write(header, 0, 256);
            outfile.Write(aram, 0, 65536);

            for (int i = 0; i < 256; i++)
                outfile.WriteByte(0);

            //Update PC Address
            outfile.Seek(0x25, SeekOrigin.Begin);

            outfile.WriteByte((byte)(lastaddr & 0xFF));
            outfile.WriteByte((byte)(lastaddr >> 8));

            outfile.Close();
            Console.WriteLine("- Successfully created " + args[0]);
        }

        static void Usage()
        {
            Console.WriteLine("Usage: SBN2SPC [out file] [in files]");
        }

        static void Error(string error)
        {
            Console.WriteLine(error);
        }

        //Returns the last address
        static ushort InsertNRM(byte[] aram, byte[] data)
        {
            ushort length = 0;
            ushort addr = 0;
            int offset = 0;
            do
            {
                length = (ushort)(data[offset] | (data[offset + 1] << 8));
                addr = (ushort)(data[offset + 2] | (data[offset + 3] << 8));
                Console.WriteLine("-Debug: " + offset.ToString("X04") + ": " + length.ToString("X04") + " - " + addr.ToString("X04"));
                offset += 4;
                for (int i = 0; i < length; i++)
                    aram[addr + i] = data[offset + i];
                offset += length;
            } while (length != 0 || offset > data.Length);
            return addr;
        }
    }
}

